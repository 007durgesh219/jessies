#!/usr/bin/ruby -w

require "fileutils.rb"
require "pathname.rb"

# Cope with symbolic links to this script.
project_root = Pathname.new("#{__FILE__}/..").realpath().dirname()
salma_hayek = Pathname.new("#{project_root}/../salma-hayek").realpath()
require "#{salma_hayek}/bin/target-os.rb"
require "#{salma_hayek}/bin/invoke-java.rb"

HOME = ENV["HOME"]
TARGET_OS = target_os()

debugger_class_name = "e.debugger.Debugger"
debugger_preferences_directory = "#{HOME}/.#{debugger_class_name}"
if TARGET_OS == "Darwin"
	debugger_preferences_directory = "#{HOME}/Library/Preferences/#{debugger_class_name}"
end

def issueDebuggerCommand(debugger_preferences_directory, command)
	begin
		File.new("#{debugger_preferences_directory}/debugger-server-port").read() =~ /^(.+):(\d+)$/
		host = $1
		port = $2.to_i()
		require 'net/telnet'
		telnet = Net::Telnet.new('Host' => host, 'Port' => port, 'Telnetmode' => false)
		telnet.puts("#{command}\r")
		print(telnet.readlines().join(""))
		telnet.close()
		return true
	rescue
		return false
	end
end

if FileTest.directory?(debugger_preferences_directory) == false
	puts("Debugger: Couldn't find preferences directory '#{debugger_preferences_directory}.")
	puts("Debugger: Creating preferences directory '#{debugger_preferences_directory}'.")
	Dir.mkdir(debugger_preferences_directory)
end

if ARGV.size() > 0
	command = ARGV.join(" ");
	if issueDebuggerCommand(debugger_preferences_directory, command)
		exit(0)
	end
end

# Create a log file, and link to it as the newest.
# Symbolically linking to a file which doesn't exist yet is perfectly legal.
log_filename = "/tmp/debugger.log.#$$"
FileUtils.ln_sf(log_filename, "/tmp/debugger.log")

options = []
options.push("-Djava.awt.Window.locationByPlatform=true")
options.push("-DpreferencesDirectory=#{cygpath(debugger_preferences_directory)}")

invoker = Java.new("Debugger", "e/util/Launcher")
invoker.set_icons("#{project_root}/lib/debugger.icns", "#{project_root}/lib/debugger-128.png")
invoker.log_filename = log_filename
invoker.add_extra_java_arguments(options)
invoker.invoke([ "Debugger", "#{debugger_class_name}Launchable" ])
