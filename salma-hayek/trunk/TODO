Items to be done for PTextArea:

* Misspell the word at the end of a line, and the misspelling highlight will extend to the right-hand edge of the component. (Only true if the end of the line isn't also the end of the buffer.)

* Implement setEditable. (SCM is waiting for this.)

* Implement a default find UI for applications other than Edit. (SCM is waiting for this, and it's always nice to have.)

* Cope with insets. We're rendering text too close to the edge.

* Compound edit support.

* Compounding adjacent edits?

* Create a language-specific API to work out double-click selections, and use this in the mouse handler.

* Refactor the way split lines are updated to work in terms of PLineSegments.

* Continue refactoring of line segment stuff in PTextArea.

* Style C/C++ pre-processor tokens specially.

* Auto-scroll on selection (all types) flickers more than I think it should.

* the following JTextArea methods are thread-safe: append, insert, replace, and setText.

* we can perhaps take Ed's old suggestion for how menus should work into account, and have a constructive scheme, rather than a replacement scheme. (so there's basic stuff offered by the component, extra stuff from the spelling checker, extra stuff from the application, et cetera. Cocoa has hooks for random other bits of code to declare they have actions too.)

* Double-clicking in whitespace behaves neither like native components, nor like Edit used to. In particular, I'm used to double-clicking past the end of a line that doesn't end in '{' to select the line (an Edit/acme thing).
