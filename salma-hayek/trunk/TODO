Items to be done for PTextArea:

* Cope with insets. We're rendering text too close to the edge.

* Use the UIManager's text color, rather than black.

* Some way to monitor the undo manager, so we can clear the dirty flag in Edit. (And have the Undo/Redo menu items enable/disable themselves?)

* Compound edit support.

* Compounding adjacent edits?

* Create a language-specific API to work out double-click selections, and use this in the mouse handler.

* Refactor the way split lines are updated to work in terms of PLineSegments.

* Style C/C++ pre-processor tokens specially.

* Auto-scroll flickers for double/triple click sweeps:

this sort of fixes double/triple-click auto-scroll, but it looks really ugly because the DragHandlers are causing us to jump to the wrong end of the selection, so this code makes us jump back to the correct end, and you see the flicker.

Index: src/e/ptextarea/PMouseHandler.java
===================================================================
--- src/e/ptextarea/PMouseHandler.java  (revision 414)
+++ src/e/ptextarea/PMouseHandler.java  (working copy)
@@ -1,6 +1,5 @@
 package e.ptextarea;

-
 import java.awt.*;
 import java.awt.event.*;
 import javax.swing.*;
@@ -54,7 +53,9 @@

     public void mouseDragged(MouseEvent event) {
         if (dragHandler != null) {
-            dragHandler.mouseDragged(getOffsetAtMouse(event));
+            int newOffset = getOffsetAtMouse(event);
+            dragHandler.mouseDragged(newOffset);
+            textArea.ensureVisibilityOfOffset(newOffset);
         }
     }

* martind reports a wrapping bug ("Breaking a wrapped line by pressing Enter in the middle of a line causes the second half of the line to be unwrapped until a resize rewraps it."); remove the newline before "^this sort of" above, then hit return. The long line is no longer wrapped. Resizing or editing within the line cause re-wrapping.

* the following JTextArea methods are thread-safe: append, insert, replace, and setText.

* we can perhaps take Ed's old suggestion for how menus should work into account, and have a constructive scheme, rather than a replacement scheme. (so there's basic stuff offered by the component, extra stuff from the spelling checker, extra stuff from the application, et cetera. Cocoa has hooks for random other bits of code to declare they have actions too.)
