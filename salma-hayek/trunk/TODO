Items to be done for PTextArea:

* Write a PTextStyler for patches.

* Change the PTextStyler interface to work in terms of Lists of segments, rather than arrays of them.

* Make a PSegmentIterator implement the Iterator interface when we have the generics of 1.5.  For now, doing so would just get in our way, forcing us to return Object when we know damned well what we want returned).

* Implement a default find UI for applications other than Edit. (SCM is waiting for this, and it's always nice to have.)

* Cope with insets. We're rendering text too close to the edge.

* Compounding adjacent edits? Is there a behavior that we'd actually want? I usually find this more annoying than useful, even if it does save space.

* Refactor the way split lines are updated to work in terms of PLineSegments.

* Continue refactoring of line segment stuff in PTextArea.

* Style C/C++ pre-processor tokens specially.

* Auto-scroll on selection (all types) flickers more than I think it should.

* the following JTextArea methods are thread-safe: append, insert, replace, and setText.

* we can perhaps take Ed's old suggestion for how menus should work into account, and have a constructive scheme, rather than a replacement scheme. (so there's basic stuff offered by the component, extra stuff from the spelling checker, extra stuff from the application, et cetera. Cocoa has hooks for random other bits of code to declare they have actions too.)

* Double-clicking in whitespace behaves neither like native components, nor like Edit used to. In particular, I'm used to double-clicking past the end of a line that doesn't end in '{' to select the line (an Edit/acme thing).

* Try to get rid of the "get methods which aren't" in the indentation code, perhaps by none, one or more ideas from this week's guest publication:

  class SourceLine {
    Indentation indentation;
    String code;
  }

  CommentUtilities.stripDoubleSlashComment

* Improve PNewlineInserter:

  (1) int fn(|P0 a0) {
    
       should become:
       
       int fn(
         P0 a0
       ) {

       This is waiting for a good idea.  That may come in the form of generalizing the problem or of deciding on an elegant way to implement it.
       
  (2) Use PSameStyleCharSequence instead of regular expressions to exclude comments etc from the code which finds the mismatched brackets whose partners should be inserted.
