PTextArea
---------

* Compounding adjacent edits? Is there a behavior that we'd actually want? I usually find this more annoying than useful, even if it does save space.

* Refactor the way split lines are updated to work in terms of PLineSegments.

* Auto-scroll on selection (all types) flickers more than I think it should when there's a wrapped line.

* the following JTextArea methods are thread-safe: append, insert, replace, and setText.

* Try to get rid of the "get methods which aren't" in the indentation code, perhaps by none, one or more ideas from this week's guest publication:

  class SourceLine {
    Indentation indentation;
    String code;
  }

* Improve PNewlineInserter:

  (1) int fn(|P0 a0) {
    
       should become:
       
       int fn(
         P0 a0
       ) {

       This is waiting for a good idea.  That may come in the form of generalizing the problem or of deciding on an elegant way to implement it.
       
  (2) Exclude comments etc from the code which finds the mismatched brackets whose partners should be inserted.

* [RFE] something i read suggested that you can get Xcode to wrap in such a way that it starts drawing wrapped lines at the level of the previous line's indent. so:

  |----------------window width--------------|
  class C {
    void f() {
      if (a) {
        // this is a long comment up to the---
  ------wrap mark. the editor indents the-----
  ------wrapped line. i reckon this would-----
  ------stop me from writing multi-line-------
  ------C++-style comments and implying a-----
  ------wrap width that isn't necessarily-----
  ------what the reader's using.
        g();
      }
    }
  }

  (only you'll have to imagine that the runs of '-' are our current wrap indicator.)

  this may be another case of misunderstanding into something better than what was meant, but that sounds like an interesting idea.

  Kate and BBEdit do this. i haven't seen BBEdit, but Kate's implementation looks *really* ugly. imagining how it might work with our rendering of wrapped lines, though, i think it would be pretty neat.

* Python and HTML/XML highlighting and indenting.

* Pipe functionality: modal dialog. Brought up by C-|.
  Command: text field with history
  Input:  none / selection / all text
  Output: discard / replace selection / replace all text / new window / after selection / after all / to clipboard

* Replace e.util.Log with java.util.logging code.

General stuff
-------------

* Here's a really cool auto-update system (for Cocoa) that it would be nice to imitate: 
  http://www.andymatuschak.org/articles/2006/01/09/introducing-sparkle-easy-self-updates-for-all

Installation
------------

* Several people have mentioned that it would be nice to have some kind of success message from the Windows installer.

* Several people have mentioned that they went looking for the Terminator icon (Windows users love Terminator!) in their Start menu, not on their desktop.

* Problems with native (non-Cygwin) Ruby on Windows. We only require Ruby 1.9's pathname.rb (which can be copied over the 1.8 file) to fix:

    c:/ruby/lib/ruby/1.8/pathname.rb:341:in `lstat': Invalid argument - /C:/Documents and Settings/martind/f:/software.jessies.org/salma-hayek/bin/fatbits (Errno::EINVAL)

  We would have to install the Ruby scripts as .rb (which would break anywhere we call them programmatically unless we rename them everywhere) or set up shortcuts like we do for terminator.
