#!/usr/bin/ruby -w

# A Subversion post-commit hook. Edit the configurable stuff below, and
# copy into your repository's hooks/ directory as "post-commit". Don't
# forget to "chmod a+x post-commit".

# You can test this script without checking in bogus revisions with, for example:
# /home/software/svnroot/salma-hayek/hooks/post-commit /home/software/svnroot/salma-hayek 1237

# ------------------------------------------------------------------------

# You *will* need to change these.

mail_domain="jessies.org" # Assumes all authors (and the to_address) share a domain.

to_address="software@#{mail_domain}"
reply_to_address=to_address # Use "nil" to reply to author.

svnlook="/usr/bin/svnlook"

if `whoami` =~ /^(elliotth|martind)$/
  to_address=$1
  reply_to_address=nil
  svnlook="svnlook"
end

# ------------------------------------------------------------------------

require 'cgi'
require 'pathname'

# __FILE__ may be relative to the current directory which we're about to change.
script_path=Pathname.new(__FILE__).realpath.dirname
$: << script_path

# We can work out the repository name because we're <path>/<name>/hooks/post-commit
repository_name=Pathname.new(__FILE__).parent().parent().basename()

require 'escaping.rb'
require 'patch-to-html-email.rb'

# Subversion's commit-email.pl suggests that svnlook might create files.
Dir.chdir("/tmp")

# What revision in what repository?
repository_path = ARGV.shift()
rev = ARGV.shift()

# Get the overview information.
# Despite storing everything as UTF-8, svn(1) insists that your LC_CTYPE is
# set to request UTF-8 if you want it to refrain from mangling text such
# as 宮部みゆき or 火車!
ENV["LC_CTYPE"] = "en_US.UTF-8"
info=`#{svnlook} info #{repository_path} -r #{rev}`
info_lines=info.split("\n")
author=info_lines.shift
date=info_lines.shift
info_lines.shift
comment=info_lines

# Remove the localized date that follows the ISO date.
date = date.gsub(/ \(.*\)$/, "")

from_address="#{author}@#{mail_domain}"

subject="#{repository_name} revision #{rev}"

body = ""

# Output the overview.
body << "<p class=\"revision-header\">#{date} / <b>#{author}</b></p>\n"
body << "<div class=\"check-in-comment\">\n"
body << "<p>"
comment.each() {
    |line|
    body << escapeTextLineToHtml(line)
}
body << "</p></div>\n"

# Get and output the patch.
# We'd like to | #{script_path}/bin/annotate-patch.rb
# But that requires that the correct version of the file is available as trunk/filename
changes=`#{svnlook} diff #{repository_path} -r #{rev}`
changes.gsub!(/\r/, "") # In case we're running on MS Windows.

sendHtmlEmail(from_address, to_address, reply_to_address, subject, body, changes.split("\n"))

# Fix the permissions on any new log file created by Subversion's Berkeley db because bdb creates a new file,
# obeying umask, rather than copying the mode of the current log file.
# Although the setgid directory means that the file's group is "software", that doesn't help its permissions.
system("find #{repository_path}/db -name \"log.*\" -not -perm -g+w | xargs --no-run-if-empty chmod g+w")

# Update the checked-out copy which, in salma-hayek, includes this post-commit trigger itself.

# FIXME: if there's a script error which prevents us from getting this far, it
# will require manual intervention to fix, because we'll be stuck at the broken
# revision forever.

begin
    Dir.chdir("#{script_path}/../#{repository_name}")
    updateResult=`{ svn update && make www-dist; } 2>&1`
rescue Exception => ex
    updateResult = ex.to_s()
end
if updateResult =~ /(Updated to|At) revision/
    # Assume success
else
    begin
        fd = open("|mail -s 'the post-commit svn update failed' #{to_address}", "w")
        fd.print("\n")
        fd.print(updateResult)
    rescue
        exit(1)
    end
    fd.close
end

# We're done.
exit(0)
