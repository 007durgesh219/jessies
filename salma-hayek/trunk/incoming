#!/usr/bin/ruby -w
ENV["PATH"]="/usr/local/bin:/opt/csw/bin:/opt/SUNWspro/bin:/usr/bin:/usr/sfw/bin:/usr/openwin/bin:/usr/ccs/bin"
# The previous line is quite specific to the particular host we're using and it may well be obsolete.

# A Mercurial incoming hook, modified from Martin's post-commit script.
# Add the following line to the [hooks] section of <repository>/.hg/hgrc:
# 
# incoming = <repository>/.hg/incoming $HG_NODE
#
# and symlink <repository>/.hg/incoming to this script.

# ------------------------------------------------------------------------

# You *will* need to change these.

mail_domain="jessies.org" # Assumes all authors (and the to_address) share a domain.

to_address="software@#{mail_domain}"
reply_to_address=nil

if ENV["LOGNAME"] =~ /^(elliotth|martind)$/
  to_address=$1
end

# ------------------------------------------------------------------------

require "cgi"
require "pathname"

# __FILE__ may be relative to the current directory which we're about to change.
script_path=Pathname.new(__FILE__).realpath().dirname()
$: << script_path

# We can work out the repository name because we're <path>/<name>/.hg/incoming
# We could also work this out from the spurious repository_path argument.
repository_path=Pathname.new(__FILE__).parent().parent()
repository_name=repository_path.basename()

require "escaping.rb"
require "patch-to-html-email.rb"

# Subversion's commit-email.pl suggests that svnlook might create files.
Dir.chdir("/tmp")

# What revision in what repository?
hash = ARGV.shift()

# Get the overview information.
# svn(1) stores everything as UTF-8 but translates it on output according to LC_CTYPE.
# This appears not to be set by default on jessies.org in the environment in which this job runs.
ENV["LC_CTYPE"] = "en_US.UTF-8"

hglog=`cd #{repository_path} && hg log -v -r #{hash}`
comment=hglog.gsub(/^.*description:\s*/m, "")

hgparents=`cd #{repository_path} && hg parents -r #{hash}`
parent=hgparents.split("\n").shift().gsub(/^.*:\s*\d+:/, "")

hgdiff=`cd #{repository_path} && hg diff -r #{parent} -r #{hash}`
changes=hgdiff.gsub(/^diff\s+-r\s+[0-9a-f]+\s+-r\s+[0-9a-f]+.*$/, "")

hglog_lines=hglog.split("\n")
changeset=hglog_lines.shift().gsub(/^changeset:\s*/, "")
rev=changeset.gsub(/:.*$/, "")

user=hglog_lines.shift()
while user !~ /^user:/
    user=hglog_lines.shift()
end
user=user.gsub(/^user:\s*/, "")
date=hglog_lines.shift().gsub(/^date:\s*/, "")

if user =~ /\S+@\S+\.\S+/
    from_address=user
else
    from_address=to_address
end

subject="#{repository_name} revision #{rev}"

body = ""

# Output the overview.
body << "<p class=\"revision-header\">#{date} / <b>#{escapeTextLineToHtml(user)}</b></p>\n"
body << "<div class=\"check-in-comment\">\n"
body << "<p>"
comment.each() {
    |line|
    body << escapeTextLineToHtml(line)
}
body << "</p></div>\n"

# Get and output the patch.
# We'd like to | #{script_path}/bin/annotate-patch.rb
# But that requires that the correct version of the file is available as trunk/filename
changes.gsub!(/\r/, "") # In case we're running on MS Windows.

sendHtmlEmail(from_address, to_address, reply_to_address, subject, body, changes.split("\n"))

# FIXME: if there's a script error which prevents us from getting this far, it
# will require manual intervention to fix, because we'll be stuck at the broken
# revision forever.

updateResult=`{ umask 002 && cd #{script_path}/../#{repository_name} && hg pull && hg update && make www-dist source-dist; } 2>&1`
if $? != 0
    begin
        # Consider using http://www.opengroup.org/onlinepubs/007908799/xcu/mailx.html if sendmail causes a problem.
        sendmail="/usr/sbin/sendmail"
        
        open("|#{sendmail} #{to_address}", "w") {
            |fd|
            fd.puts("To: #{to_address}")
            fd.puts("Subject: the post-commit update and dist failed")
            fd.puts("\n")
            fd.puts(updateResult)
        }
    rescue
        exit(1)
    end
end

# FIXME: What is the real reason for exit(0)?
exit(0)
