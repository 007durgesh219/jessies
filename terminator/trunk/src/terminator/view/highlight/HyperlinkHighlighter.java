package terminator.view.highlight;

import java.awt.*;
import java.awt.event.*;
import java.io.*;
import java.util.regex.*;
import e.util.*;

import terminator.*;
import terminator.model.*;
import terminator.view.*;

/**
 * Tries to create links to files.
 */
public class HyperlinkHighlighter implements Highlighter {
	/** The underlined blue standard hyperlink style. */
	private final Style style = new Style(Options.getSharedInstance().getColor("linkColor"), null, null, Boolean.TRUE);
	
	private String directory = "~/";
	
	/**
	 * This regular expression deliberately matches too much. We narrow it down a bit later.
	 */
	private Pattern pattern = Pattern.compile("(?:^| |\")([^ :\"]+\\.\\w+([\\d:]+)?)");
	
	/**
	 * This is the group within 'pattern' that should be taken as a filename.
	 */
	private int relevantGroup = 1;
	
	public String getName() {
		return "Hyperlink Highlighter";
	}
	
	/**
	 * Lets us be notified of title changes; we assume that the title is the name of the current directory.
	 */
	public void setDirectory(String name) {
		this.directory = name;
	}
	
	/** Request to add highlights to all lines of the view from the index given onwards. */
	public int addHighlights(JTextBuffer view, int firstLineIndex) {
		TextBuffer model = view.getModel();
		int count = 0;
		for (int i = firstLineIndex; i < model.getLineCount(); i++) {
			String line = model.getLine(i);
			count += addHighlightsOnLine(view, i, line);
		}
		return count;
	}
	
	private int addHighlightsOnLine(JTextBuffer view, int lineIndex, String text) {
		int count = 0;
		Matcher matcher = pattern.matcher(text);
		while (matcher.find()) {
			/*
			 * We're most useful in providing links to grep matches, so we
			 * need to avoid being confused by stuff like File.java:123.
			 */
			String name = matcher.group(relevantGroup);
			int colonIndex = name.indexOf(':');
			if (colonIndex != -1) {
				name = name.substring(0, colonIndex);
			}
			
			/*
			 * If the file doesn't exist, this wasn't a useful match.
			 */
			File file = null;
			if (name.startsWith("/") || name.startsWith("~")) {
				file = FileUtilities.fileFromString(name);
			} else {
				file = FileUtilities.fileFromParentAndString(directory, name);
			}
			if (file.exists() == false) {
				continue;
			}
			
			Location start = new Location(lineIndex, matcher.start(relevantGroup));
			Location end = new Location(lineIndex, matcher.end(relevantGroup));
			Highlight highlight = new Highlight(HyperlinkHighlighter.this, start, end, style);
			highlight.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
			view.addHighlight(highlight);
			++count;
		}
		return count;
	}

	/** Request to do something when the user clicks on a Highlight generated by this Highlighter. */
	public void highlightClicked(JTextBuffer view, Highlight highlight, String text, MouseEvent event) {
		Matcher matcher = pattern.matcher(text);
		while (matcher.find()) {
			String command = getEditor() + " " + matcher.group(relevantGroup);
			ProcessUtilities.spawn(FileUtilities.fileFromString(directory), new String[] { "bash", "-c", command });
		}
	}
	
	private static String getEditor() {
		String result = System.getenv("EDITOR");
		if (result == null) {
			result = "vi";
		}
		return result;
	}
}
