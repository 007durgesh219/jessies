#!/usr/bin/ruby -w

begin
  require 'fileutils.rb'
  have_fileutils = true
rescue LoadError
  have_fileutils = false
end
begin
  require 'pathname.rb'
  have_pathname = true
  # Cope with symbolic links to this script.
  terminator_home = Pathname.new("#{__FILE__}/..").realpath().dirname()
  salma_hayek = Pathname.new("#{terminator_home}/../salma-hayek").realpath()
rescue LoadError
  terminator_bin = `cd #{File.dirname(File.expand_path(__FILE__))} && /bin/pwd`.chomp()
  terminator_home = File.dirname(terminator_bin)
  salma_hayek = "#{terminator_home}/../salma-hayek"
end
ENV["TERMINATOR_HOME"] = terminator_home

class_name = "terminator/Terminator"
HOME = ENV["HOME"]

require "#{salma_hayek}/bin/target-os.rb"
TARGET_OS = target_os()
require "#{salma_hayek}/bin/invoke-java.rb"

# Make sure we have a directory for the terminal logs.
log_directory="#{HOME}/.terminal-logs"
if test(?d, log_directory) == false
  Dir.mkdir(log_directory)
  system("chmod og-rx #{log_directory}")
end

server_port_file="#{log_directory}/.terminator-server-port"

if ENV["DEBUGGING_TERMINATOR"] == nil && test(?f, server_port_file)
  command = ARGV.join("\0")
  # See if there's already a Terminator running that can open us a new window.
  # This lets us emulate the Mac OS behavior when clicking on the Dock icon
  # on Linux (from gnome-panel or whatever). In particular, using this trick
  # we can open a new window quicker than xterm(1), from the user's point of
  # view.
  begin
    File.new(server_port_file).read() =~ /^(.+):(\d+)$/
    host = $1
    port = $2.to_i()
    
    require 'net/telnet'
    telnet = Net::Telnet.new('Host' => 'localhost', 'Port' => port, 'Telnetmode' => false)
    telnet.puts("new #{command}")
    print(telnet.readlines().join(""))
    telnet.close()
    exit(0)
  rescue
    # fall through...
  end
end

classpath="#{terminator_home}/classes:#{salma_hayek}/classes:#{salma_hayek}/swing-worker.jar"


pty_path="#{terminator_home}/.generated/native/all/pty/#{TARGET_OS}"
jni_lib_prefix="lib"
jni_lib_extension="so"
if TARGET_OS == "Darwin"
  jni_lib_extension="jnilib"
elsif TARGET_OS == "Cygwin"
  jni_lib_prefix=""
  jni_lib_extension="dll"
end
pty_library="#{pty_path}/#{jni_lib_prefix}pty.#{jni_lib_extension}"

heap_size="1g"
launcher="java"
if TARGET_OS == "Cygwin"
  heap_size="100m"
  launcher="#{salma_hayek}/.generated/native/all/launcher/#{TARGET_OS}/launcher"
  if ENV["DEBUGGING_TERMINATOR"] == nil
    launcher="#{launcher}w"
  end
end

os_specific_options = []

if test(?w, "/usr/share/terminfo")
  terminfo="/usr/share/terminfo"
else
  terminfo="#{HOME}/.terminfo"
end
ENV["TERMINFO"]=terminfo

tic_binary=`bash -c "type -p tic"`.chomp()
terminfo_SRC="#{terminator_home}/doc/terminfo/terminator.tic"
terminfo_DST="#{terminfo}/t/terminator"
if test(?e, terminfo_DST) == false
  system("mkdir -p #{terminfo_DST} && rmdir #{terminfo_DST}")
end
if tic_binary != ""
  if TARGET_OS == "SunOS"
    system("#{tic_binary} #{terminfo_SRC}")
  else
    system("#{tic_binary} -v10 -o#{terminfo} #{terminfo_SRC}")
  end
elsif test(?f, terminfo_DST) == false
  # If you see an error like this:
  # cp: /usr/local/bin/../doc/terminfo/terminator: No such file or directory
  # It's because we haven't been able to find the ${terminator_home} directory.
  # This is probably because you're running an old version of Ruby without
  # the symlink-following class.
  # See the "require" statements above.
  system("cp #{terminator_home}/doc/terminfo/terminator #{terminfo_DST}")
end

# If we don't have a pre-compiled native library for this
# architecture, try to build it.
if test(?x, pty_library) == false
  system("make #{pty_library}")
end

if TARGET_OS == "Darwin"
  # Make ourselves look a little better...
  os_specific_options = [ "-Xdock:name=Terminator:icon=/Applications/Utilities/Terminal.app/Contents/Resources/icon.icns" ]
elsif TARGET_OS == "Linux"
  # Use locate(1) to find the gnome-terminal icon.
  # Cache the result, because this is the single most expensive part of
  # the script.
  #  icon_filename_file=$log_directory/.cached-icon
  #  if [ ! -f $icon_filename_file ] || [ ! -f `cat $icon_filename_file` ]
  #  then
  #    locate gnome-terminal.png | grep 32x32 | head -1 > $icon_filename_file
  #  fi
  #  icon_file=`cat $icon_filename_file`
  #  os_specific_options=-Dterminator.frame.icon=$icon_file
end

options = [ "-Xmx#{heap_size}", "-Djava.class.path=#{cygpath(classpath)}", "-Djava.library.path=#{cygpath(pty_path)}" ]
options.concat(os_specific_options)
log_filename="#{log_directory}/terminator.log.#{$$}"
if ENV["DEBUGGING_TERMINATOR"] == nil
  options.push("-De.util.Log.filename=#{cygpath(log_filename)}")
end

args = [ launcher ]
args.concat(options)
args.push(class_name)
args.concat(ARGV)
system(*args) || system("cat", log_filename)
