#!/bin/bash

UNAME=`uname`

# Make sure we have a directory for the terminal logs.
log_directory=~/.terminal-logs
if [ ! -d $log_directory ]
then
  mkdir -p $log_directory && chmod og-rx $log_directory
fi

server_port_file=$log_directory/.terminator-server-port
if [ "$UNAME" != "Darwin" ] && [ "$DEBUGGING_TERMINATOR" == "" ] && [ $# == 0 ] && [ -f $server_port_file ]
then
  # See if there's already a Terminator running that can open us a new window.
  # This lets us emulate the Mac OS behavior when clicking on the Dock icon
  # on Linux (from gnome-panel or whatever). In particular, using this trick
  # we can open a new window quicker than xterm(1), from the user's point of
  # view.
  port=`cat $server_port_file`
  socket_output=`echo new | socket localhost $port 2> /dev/null`
  if [ $? == 0 ]
  then
    exit 0
  fi
fi

real_script=`readlink $0 || echo $0` # Deals with symbolic links to this script.

TERMINATOR_HOME=`dirname $real_script`/..
CLASSPATH=$TERMINATOR_HOME/classes:$TERMINATOR_HOME/../salma-hayek/classes:$TERMINATOR_HOME/terminator.jar
PTY_BINARY=$TERMINATOR_HOME/native/all/pty/pty-$UNAME-`arch`

if [ ! -w /usr/share/terminfo ]
then
  export TERMINFO=~/.terminfo
else
  export TERMINFO=/usr/share/terminfo
fi

TIC=`type -p tic`
TERMINFO_SRC=$TERMINATOR_HOME/doc/terminfo/terminator.tic
TERMINFO_DST=$TERMINFO/t/terminator
if [ "$UNAME" == "Darwin" ]
then
  case "`uname -r`" in
  7.*)
    # Mac OS X 10.3 only looks in /74/, but tic puts stuff in /t/.
    TERMINFO_DST=$TERMINFO/74/terminator
    TIC=""
    ;;
  esac
  # While we're here, make ourselves look a little better...
  OS_SPECIFIC_OPTIONS=-Xdock:name=Terminator:icon=/Applications/Utilities/Terminal.app/Contents/Resources/icon.icns
fi
if [ ! -e $TERMINFO_DST ]
then
    mkdir -p $TERMINFO_DST && rmdir $TERMINFO_DST
fi

if [ "$UNAME" == "Linux" ]
then
  # Use locate(1) to find the gnome-terminal icon.
  # Cache the result, because this is the single most expensive part of
  # the script.
  icon_filename_file=$log_directory/.cached-icon
  if [ ! -f $icon_filename_file ] || [ ! -f `cat $icon_filename_file` ]
  then
    locate gnome-terminal.png | grep 32x32 | head -1 > $icon_filename_file
  fi
  icon_file=`cat $icon_filename_file`
  OS_SPECIFIC_OPTIONS=-Dterminator.frame.icon=$icon_file
fi

if [ "$TIC" != "" ]
then
  tic -o$TERMINFO $TERMINFO_SRC
else
  if [ ! -e $TERMINFO_DST ]
  then
    cp $TERMINATOR_HOME/doc/terminfo/terminator $TERMINFO_DST
  fi
fi

# If we don't have a pre-compiled 'pty' program for this
# architecture, try to build it.
if [ ! -x $PTY_BINARY ]
then
  make -C `dirname $PTY_BINARY`
fi

options="-Xmx1g -cp $CLASSPATH $OS_SPECIFIC_OPTIONS -Djava.awt.Window.locationByPlatform=true -Dpty.binary=$PTY_BINARY"
class_name=terminator.Terminator
log_filename=$log_directory/terminator.log.$$
if [ "$DEBUGGING_TERMINATOR" != "" ]
then
  java $options $class_name "$@"
else
  java $options $class_name "$@" > $log_filename 2>&1 || cat $log_filename 1>&2 &
fi
