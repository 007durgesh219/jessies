#!/usr/bin/ruby -w

require "fileutils.rb"
require "pathname.rb"

# Cope with symbolic links to this script.
terminator_home = Pathname.new(__FILE__).realpath().dirname().dirname()
salma_hayek = Pathname.new("#{terminator_home}/../salma-hayek").realpath()

require "#{salma_hayek}/bin/target-os.rb"
require "#{salma_hayek}/bin/invoke-java.rb"
require "#{salma_hayek}/bin/which.rb"

# Make sure we have a directory for the terminal logs.
log_directory = "#{ENV['HOME']}/.terminal-logs"
if test(?d, log_directory) == false
  Dir.mkdir(log_directory)
  system("chmod", "og-rx", log_directory)
end

def tryInAppServer(salma_hayek, serverPortPathname)
  # InAppClient's constructor stops anyone else from reading the .secret file.
  client = InAppClient.new(serverPortPathname)
  if ENV["DEBUGGING_TERMINATOR"]
    return
  end
  # We should start a new Terminator if the client (this script) is newer than
  # the server (the currently-running Terminator). Checking just the
  # modification time of just the script is only an approximation, but it's
  # close enough for users who'll install all the files at once anyway.
  if FileUtils.uptodate?(serverPortPathname, [__FILE__]) == false
    return
  end
  # We only support the simple "new shell" case. Allowing the execution of
  # arbitrary commands would be a security hole. This is, as explained below,
  # simply a performance optimization.
  # This also stops existing terminals from having their options changed when
  # someone starts a new terminal.
  # It should also mean that my "runtitan" commands always block, like an xterm
  # would, rather than sometimes exiting immediately.
  workingDirectory = Dir.getwd()
  if ARGV.empty?() == false && ARGV[0] == "--working-directory"
    ARGV.shift()
    workingDirectory = ARGV.shift()
  end
  if ARGV.empty?() == false
    return
  end
  # See if there's already a Terminator running that can open us a new window.
  # This lets us emulate the Mac OS behavior when clicking on the Dock icon
  # on Linux (from gnome-panel or whatever). In particular, using this trick
  # we can open a new window quicker than xterm(1), from the user's point of
  # view.
  
  # If you use Terminator on two machines, you don't want new terminals
  # to appear arbitrarily on one of them.
  # (If you call the edit script on two machines, by contrast, you are likely
  # to want the files to be opened on just one machine.)
  # We could name the serverPortPathname after the host except
  # that some hosts have more than one name and more than one IP address.
  # If the host running Terminator isn't the same as localhost,
  # then we are unlikely to be able to make a connection
  # and should fall back to the unoptimized code path.
  client.overrideHost("localhost")
  if client.trySendCommand("newShell #{workingDirectory}") == false
    return
  end

  # Job done, so finish any GNOME startup notification and exit.
  desktop_startup_id = ENV['DESKTOP_STARTUP_ID']
  if desktop_startup_id != nil
    system("#{salma_hayek}/.generated/Linux/bin/finish-gnome-startup", desktop_startup_id)
  end
  exit(0)
end

DISPLAY = ENV["DISPLAY"]
serverPortPathname = Pathname.new("#{log_directory}/.terminator-server-port#{DISPLAY}")
tryInAppServer(salma_hayek, serverPortPathname)

launcher = "java"
if target_os() == "Cygwin"
  launcher = "#{salma_hayek}/.generated/#{target_os()}/bin/launcher"
  if ENV["DEBUGGING_TERMINATOR"] == nil
    launcher = "#{launcher}w"
  end
end

# rubyw.exe quits if it can't write its "Insecure world writable dir" warnings
# to $stderr every time it uses Kernel.system or Kernel.`.
if target_os() == "Cygwin" && File.exists?("/proc/self/fd/2") == false
  $stderr = File.open("/dev/null", "w")
end

def install_terminfo_in(original_file, directory)
  # FIXME: if original_file is newer than terminfo_file, we should replace it anyway.
  terminfo_file = "#{directory}terminator"
  if test(?e, terminfo_file) == false
    FileUtils.mkdir_p(directory)
  end
  if test(?f, terminfo_file) == false
    FileUtils.cp(original_file, terminfo_file)
  end
end

# Make sure our terminfo is available.
compiled_terminfo = "#{terminator_home}/lib/terminfo/terminator"
# Use the user-defined terminfo directory, or their ~/.terminfo otherwise.
# We write here even if we can write to /usr/share/terminfo/ in case they can access their home directory from other machines where they can't install system-wide.
user_terminfo = ENV['TERMINFO']
if user_terminfo == nil
  user_terminfo = "#{ENV['HOME']}/.terminfo"
end
# Mac OS won't look where every other OS looks; presumably a %x instead of a %c somewhere.
# I think they fixed it at some point, but it seems broken in 10.4, and /usr/share/terminfo/ only contains %x directories.
# We always write both possibilities under ~/.terminfo or $TERMINFO for the benefit of people who use Mac OS and other Unixes.
install_terminfo_in(compiled_terminfo, "#{user_terminfo}/t/")
install_terminfo_in(compiled_terminfo, "#{user_terminfo}/74/")
if test(?w, "/usr/share/terminfo")
  # We know what kind of system we're on, so we can put the file in the right place and not look clueless.
  prefix = (target_os() == "Darwin") ? "74" : "t"
  install_terminfo_in(compiled_terminfo, "/usr/share/terminfo/#{prefix}")
end

# FIXME: this should go into universal.make as a rule for ".tic" files.
#tic_binary = which("tic")
#if tic_binary != nil
#  tic_command = [ tic_binary ]
#  if target_os() != "Linux"
#    # Debian testing/unstable's tic(1) is currently broken, and won't write an output file if asked to be verbose. All you'll get is this on stderr:
#    # "/home/elliotth/Projects/terminator/lib/terminfo/terminator.tic", line 8, 'terminator' /usr/bin/tic: symbol lookup error: /usr/bin/tic: undefined symbol: _tracef
#    tic_command << "-v10"
#  end
#  if target_os() != "SunOS"
#    tic_command << "-o#{terminfo}"
#  end
#  terminfo_SRC = "#{terminator_home}/lib/terminfo/terminator.tic"
#  tic_command << terminfo_SRC
#  system(*tic_command)
#end

invoker = Java.new("Terminator", "terminator/Terminator")
invoker.log_filename = "#{log_directory}/terminator.log.#{$$}"
invoker.launcher = launcher
# The "user.home" system property won't necessarily point at $HOME.
# We arranged above for $HOME/.terminal-logs/ to be available, so we need to stick to it.
# (We didn't used to be able to getenv("HOME") from Java on Cygwin.)
invoker.add_pathname_property("org.jessies.terminator.logDirectory", log_directory)

# Ruby knows the mapping from signal number to signal name, but Java doesn't
# and POSIX doesn't either. So pass the information along to Java in a way
# that won't leak through to our children.
Signal.list().each() {
  | signal_name, signal_number |
  invoker.add_property("org.jessies.terminator.signal.#{signal_number}", "SIG#{signal_name}")
}

invoker.invoke()
