#!/usr/bin/ruby -w

require "fileutils.rb"
require "pathname.rb"

# Cope with symbolic links to this script.
terminator_home = Pathname.new("#{__FILE__}/..").realpath().dirname()
salma_hayek = Pathname.new("#{terminator_home}/../salma-hayek").realpath()

require "#{salma_hayek}/bin/target-os.rb"
require "#{salma_hayek}/bin/invoke-java.rb"

ENV["TERMINATOR_HOME"] = terminator_home
HOME = ENV["HOME"]

# Make sure we have a directory for the terminal logs.
log_directory = "#{HOME}/.terminal-logs"
if test(?d, log_directory) == false
  Dir.mkdir(log_directory)
  system("chmod og-rx #{log_directory}")
end

server_port_file = "#{log_directory}/.terminator-server-port"

if ENV["DEBUGGING_TERMINATOR"] == nil && test(?f, server_port_file)
  command = ARGV.join("\0")
  # See if there's already a Terminator running that can open us a new window.
  # This lets us emulate the Mac OS behavior when clicking on the Dock icon
  # on Linux (from gnome-panel or whatever). In particular, using this trick
  # we can open a new window quicker than xterm(1), from the user's point of
  # view.
  begin
    File.new(server_port_file).read() =~ /^(.+):(\d+)$/
    host = $1
    port = $2.to_i()
    
    require "net/telnet"
    telnet = Net::Telnet.new('Host' => 'localhost', 'Port' => port, 'Telnetmode' => false)
    telnet.puts("newTerminal #{command}")
    print(telnet.readlines().join(""))
    telnet.close()
    exit(0)
  rescue
    # fall through...
  end
end

pty_path = "#{terminator_home}/.generated/native/all/pty/#{target_os()}"
jni_lib_prefix = "lib"
jni_lib_extension = "so"
if target_os() == "Darwin"
  jni_lib_extension = "jnilib"
elsif target_os() == "Cygwin"
  jni_lib_prefix = ""
  jni_lib_extension = "dll"
end
pty_library = "#{pty_path}/#{jni_lib_prefix}pty.#{jni_lib_extension}"

launcher = "java"
if target_os() == "Cygwin"
  launcher = "#{salma_hayek}/.generated/native/all/launcher/#{target_os()}/launcher"
  if ENV["DEBUGGING_TERMINATOR"] == nil
    launcher = "#{launcher}w"
  end
end

if test(?w, "/usr/share/terminfo")
  terminfo = "/usr/share/terminfo"
else
  terminfo = "#{HOME}/.terminfo"
end
ENV["TERMINFO"] = terminfo

tic_binary = `bash -c "type -p tic"`.chomp()
terminfo_SRC = "#{terminator_home}/doc/terminfo/terminator.tic"
terminfo_DST = "#{terminfo}/t/terminator"
if test(?e, terminfo_DST) == false
  system("mkdir -p #{terminfo_DST} && rmdir #{terminfo_DST}")
end
if tic_binary != ""
  if target_os() == "SunOS"
    system("#{tic_binary} #{terminfo_SRC}")
  else
    system("#{tic_binary} -v10 -o#{terminfo} #{terminfo_SRC}")
  end
elsif test(?f, terminfo_DST) == false
  # If you see an error like this:
  # cp: /usr/local/bin/../doc/terminfo/terminator: No such file or directory
  # It's because we haven't been able to find the ${terminator_home} directory.
  # This is probably because you're running an old version of Ruby without
  # the symlink-following class.
  # See the "require" statements above.
  system("cp #{terminator_home}/doc/terminfo/terminator #{terminfo_DST}")
end

# If we don't have a pre-compiled native library for this
# architecture, try to build it.
if test(?x, pty_library) == false
  system("make #{pty_library}")
end

if target_os() == "Linux"
  # Use locate(1) to find the gnome-terminal icon.
  # Cache the result, because this is the single most expensive part of
  # the script.
  #  icon_filename_file=$log_directory/.cached-icon
  #  if [ ! -f $icon_filename_file ] || [ ! -f `cat $icon_filename_file` ]
  #  then
  #    locate gnome-terminal.png | grep 32x32 | head -1 > $icon_filename_file
  #  fi
  #  icon_file=`cat $icon_filename_file`
  #  options=-Dterminator.frame.icon=$icon_file
end

options = [ "-Djava.library.path=#{cygpath(pty_path)}" ]
log_filename = "#{log_directory}/terminator.log.#{$$}"
if ENV["DEBUGGING_TERMINATOR"] == nil
  options.push("-De.util.Log.filename=#{cygpath(log_filename)}")
end

invoker = Java.new("Terminator", "terminator/Terminator")
invoker.dock_icon = "/Applications/Utilities/Terminal.app/Contents/Resources/icon.icns"
invoker.add_extra_java_arguments(options)
invoker.launcher = launcher
invoker.invoke() || system("cat", log_filename)
