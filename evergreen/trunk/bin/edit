#!/usr/bin/ruby -w

require 'fileutils.rb'
require 'pathname.rb'

# Cope with symbolic links to this script.
edit_home = Pathname.new("#{__FILE__}/..").realpath().dirname()
ENV["EDIT_HOME"] = edit_home
salma_hayek = Pathname.new("#{edit_home}/../salma-hayek").realpath()

edit_class_name = "e.edit.Edit"
HOME = ENV["HOME"]
edit_preferences_directory = "#{HOME}/.#{edit_class_name}"

def openFileOnEditServer(edit_preferences_directory, filename)
  host = ENV["EDIT_HOME_SERVER"]
  if host == nil then
    host = 'localhost'
  end
  begin
    port = IO.read("#{edit_preferences_directory}/edit-server-port")
    require 'net/telnet'
    telnet = Net::Telnet.new('Host' => host, 'Port' => port.to_i(), 'Telnetmode' => false)
    telnet.puts("open #{filename}\r")
    print(telnet.readlines().join("\n"))
    telnet.close()
    return true
  rescue
    return false
  end
end

# Translate vi/gvim line number specifications.
if ARGV[0] =~ /^\+(\d+)$/
  ARGV.shift
  ARGV[0] = "#{ARGV[0]}:#$1"
end

case `uname`
when /Darwin/
    # Darwin is what Mac OS X calls itself.
    edit_preferences_directory = "#{ENV["HOME"]}/Library/Preferences/#{edit_class_name}"
    os_specific_options = "-Xdock:name=Edit:icon=/Developer/Examples/Carbon/SimpleText/SimpleText.icns"
else
    extra_classpath_entries = "#{salma_hayek}/MRJ141Stubs.jar"
end

filename = ARGV[0]
if filename != nil && openFileOnEditServer(edit_preferences_directory, File.expand_path(filename))
  exit(0)
end

if File.stat(edit_preferences_directory).directory? == false
    puts("Edit: Couldn't find preferences directory '#{edit_preferences_directory}.")
    puts("Edit: Creating preferences directory '#{edit_preferences_directory}'.")
    Dir.mkdir(edit_preferences_directory)
    puts("Edit: Copying default preferences.")
    FileUtils.cp("#{edit_home}/edit.properties-sample", "#{edit_preferences_directory}/edit.properties")
    puts("Edit: Away you go!")
end

# Create a log file, and link to it as the newest.
# Symbolically linking to a file which doesn't exist yet is perfectly legal.
edit_log = "/tmp/edit.log.#$$"
FileUtils.ln_sf(edit_log, "/tmp/edit.log")

fake_environment = ""
["CVS_RSH", "DISPLAY", "EDIT_HOME", "HOME", "JAVA_HOME", "PATH", "SHELL"].each() {
  |variable|
  value = ENV[variable]
  if value != nil
    fake_environment << " -Denv.#{variable}=#{value}"
  end
}

classpath = "-classpath #{edit_home}/classes:#{salma_hayek}/classes:#{extra_classpath_entries}"
heap_size = "-Xmx1g"

options = "#{os_specific_options} #{heap_size} #{fake_environment} #{classpath} -DpreferencesDirectory=#{edit_preferences_directory}"

if ENV["DEBUGGING_EDIT"] != nil
  system("java #{options} #{edit_class_name}")
else
  system("java #{options} #{edit_class_name} > #{edit_log} 2>&1 || cat #{edit_log} 1>&2 &")
end
