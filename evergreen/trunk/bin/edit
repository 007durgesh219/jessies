#!/usr/bin/ruby -w

begin
  require 'fileutils.rb'
  have_fileutils = true
rescue LoadError
  have_fileutils = false
end
begin
  require 'pathname.rb'
  have_pathname = true
  # Cope with symbolic links to this script.
  edit_home = Pathname.new("#{__FILE__}/..").realpath().dirname()
  salma_hayek = Pathname.new("#{edit_home}/../salma-hayek").realpath()
rescue LoadError
  edit_bin = `dirname #{__FILE__}`.chomp()
  edit_home = "#{edit_bin}/.."
  salma_hayek = "#{edit_home}/../salma-hayek"
end
ENV["EDIT_HOME"] = edit_home

edit_class_name = "e.edit.Edit"
HOME = ENV["HOME"]
UNAME=`uname`.chomp()
edit_preferences_directory = "#{HOME}/.#{edit_class_name}"
classpath_entries = [ "#{edit_home}/classes", "#{salma_hayek}/classes" ]

def openFileOnEditServer(edit_preferences_directory, filename)
  begin
    File.new("#{edit_preferences_directory}/edit-server-port").read() =~ /^(.+):(\d+)$/
    host = $1
    port = $2.to_i()
    require 'net/telnet'
    telnet = Net::Telnet.new('Host' => host, 'Port' => port, 'Telnetmode' => false)
    telnet.puts("open #{filename}\r")
    print(telnet.readlines().join(""))
    telnet.close()
    return true
  rescue
    return false
  end
end

# Translate vi/gvim line number specifications.
if ARGV[0] =~ /^\+(\d+)$/
  ARGV.shift
  ARGV[0] = "#{ARGV[0]}:#$1"
end

os_specific_options = []
case UNAME
when /Darwin/
    # Darwin is what Mac OS X calls itself.
    edit_preferences_directory = "#{ENV["HOME"]}/Library/Preferences/#{edit_class_name}"
    os_specific_options.push("-Xdock:name=Edit:icon=/Developer/Examples/Carbon/SimpleText/SimpleText.icns")
else
    classpath_entries << "#{salma_hayek}/MRJ141Stubs.jar"
end

if FileTest.directory?(edit_preferences_directory) == false
    puts("Edit: Couldn't find preferences directory '#{edit_preferences_directory}.")
    puts("Edit: Creating preferences directory '#{edit_preferences_directory}'.")
    Dir.mkdir(edit_preferences_directory)
    if have_fileutils
      puts("Edit: Copying default preferences.")
      FileUtils.cp("#{edit_home}/edit.properties-sample", "#{edit_preferences_directory}/edit.properties")
      puts("Edit: Away you go!")
    else
      puts("Edit: need Ruby 1.8")
    end
end

filename = ARGV[0]
if filename != nil && openFileOnEditServer(edit_preferences_directory, File.expand_path(filename))
  exit(0)
end

# Create a log file, and link to it as the newest.
# Symbolically linking to a file which doesn't exist yet is perfectly legal.
log_filename = "/tmp/edit.log.#$$"
if have_fileutils
  FileUtils.ln_sf(log_filename, "/tmp/edit.log")
end

def cygpath(filenameOrPath)
  if UNAME != "CYGWIN_NT-5.0"
    return filenameOrPath
  end
  args = [ "cygpath", "--windows" ]
  if filenameOrPath =~ /:/
    args.push("--path")
  end
  args.push('"' + filenameOrPath + '"')
  return `#{args.join(" ")}`.chomp
end

options = [ "-cp", "#{cygpath(classpath_entries.join(File::PATH_SEPARATOR))}" ]
options.push("-Djava.awt.Window.locationByPlatform=true")
options.push("-DpreferencesDirectory=#{cygpath(edit_preferences_directory)}")
options.push("-Xmx1g")
#options.push("-agentlib:yjpagent")
options.concat(os_specific_options)
if ENV["DEBUGGING_EDIT"] == nil
  options.push("-De.util.Log.filename=#{cygpath(log_filename)}")
end

args = [ "java" ]
args.concat(options)
args.push("e.util.Launcher")
args.push("Edit")
args.push("#{edit_class_name}Launchable")
args.concat(ARGV)
if filename != nil
  args.push(filename)
end
system(*args) || system("cat", log_filename)
