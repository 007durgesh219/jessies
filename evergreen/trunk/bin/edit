#!/usr/bin/ruby -w

require "fileutils.rb"
require "pathname.rb"

# Cope with symbolic links to this script.
project_root = Pathname.new("#{__FILE__}/..").realpath().dirname()
salma_hayek = Pathname.new("#{project_root}/../salma-hayek").realpath()
require "#{salma_hayek}/bin/target-os.rb"
require "#{salma_hayek}/bin/invoke-java.rb"

HOME = ENV["HOME"]

ENV["EDIT_HOME"] = project_root

TARGET_OS = target_os()
ENV["PATH"] = "#{salma_hayek}/.generated/native/all/setsid/#{TARGET_OS}:#{salma_hayek}/.generated/native/#{TARGET_OS}/BringProcessToFront/#{TARGET_OS}:#{ENV["PATH"]}"

edit_class_name = "e.edit.Edit"

def openFileOnEditServer(edit_preferences_directory, filename, shouldBlock)
  begin
    File.new("#{edit_preferences_directory}/edit-server-port").read() =~ /^(.+):(\d+)$/
    host = $1
    port = $2.to_i()
    require "net/telnet"
    telnet = Net::Telnet.new('Host' => host, 'Port' => port, 'Telnetmode' => false)
    telnet.puts("#{shouldBlock ? 'openAndBlock' : 'open'} #{filename}\r")
    print(telnet.readlines().join(""))
    telnet.close()
    return true
  rescue
    return false
  end
end

shouldBlock = false
if ARGV[0] == "--block"
  ARGV.shift
  shouldBlock = true
end

# Translate vi/gvim line number specifications.
if ARGV[0] =~ /^\+(\d+)$/
  ARGV.shift
  ARGV[0] = "#{ARGV[0]}:#$1"
end

edit_preferences_directory = "#{HOME}/.#{edit_class_name}"
if target_os() == "Darwin"
  # Darwin is what Mac OS X calls itself.
  edit_preferences_directory = "#{ENV["HOME"]}/Library/Preferences/#{edit_class_name}"
end

if FileTest.directory?(edit_preferences_directory) == false
  puts("Edit: Couldn't find preferences directory '#{edit_preferences_directory}.")
  puts("Edit: Creating preferences directory '#{edit_preferences_directory}'.")
  Dir.mkdir(edit_preferences_directory)
  puts("Edit: Copying default preferences.")
  FileUtils.cp("#{project_root}/edit.properties-sample", "#{edit_preferences_directory}/edit.properties")
  FileUtils.cp("#{project_root}/edit.properties-sample", "#{edit_preferences_directory}/edit.properties.when-automatically-installed")
  puts("Edit: Away you go!")
end

filename = ARGV[0]
if filename != nil && openFileOnEditServer(edit_preferences_directory, File.expand_path(filename), shouldBlock)
  exit(0)
end

# Create a log file, and link to it as the newest.
# Symbolically linking to a file which doesn't exist yet is perfectly legal.
log_filename = "/tmp/edit.log.#$$"
FileUtils.ln_sf(log_filename, "/tmp/edit.log")

options = []
options.push("-Djava.awt.Window.locationByPlatform=true")
options.push("-DpreferencesDirectory=#{cygpath(edit_preferences_directory)}")

if filename != nil
  ARGV.push(filename)
end

invoker = Java.new("Edit", "e/util/Launcher")
invoker.dock_icon = "/Developer/Examples/Carbon/SimpleText/SimpleText.icns"
invoker.log_filename = log_filename
invoker.add_extra_java_arguments(options)
invoker.invoke([ "Edit", "#{edit_class_name}Launchable" ])
